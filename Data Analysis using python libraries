{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2795f3ff",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-07-11T15:40:40.307876Z",
     "iopub.status.busy": "2024-07-11T15:40:40.307438Z",
     "iopub.status.idle": "2024-07-11T15:40:40.325319Z",
     "shell.execute_reply": "2024-07-11T15:40:40.324103Z"
    },
    "papermill": {
     "duration": 0.027087,
     "end_time": "2024-07-11T15:40:40.327865",
     "exception": false,
     "start_time": "2024-07-11T15:40:40.300778",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Building_Permits.csv', 'DataDictionaryBuildingPermit.xlsx']\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "print(os.listdir('../input/building-permit-applications-data'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ddd4993c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T15:40:40.339917Z",
     "iopub.status.busy": "2024-07-11T15:40:40.339528Z",
     "iopub.status.idle": "2024-07-11T15:40:43.928040Z",
     "shell.execute_reply": "2024-07-11T15:40:43.926883Z"
    },
    "papermill": {
     "duration": 3.596717,
     "end_time": "2024-07-11T15:40:43.930372",
     "exception": false,
     "start_time": "2024-07-11T15:40:40.333655",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_18/847690978.py:2: DtypeWarning: Columns (22,32) have mixed types. Specify dtype option on import or set low_memory=False.\n",
      "  df = pd.read_csv('../input/building-permit-applications-data/Building_Permits.csv')\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "df = pd.read_csv('../input/building-permit-applications-data/Building_Permits.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "50ded651",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T15:40:43.941370Z",
     "iopub.status.busy": "2024-07-11T15:40:43.941006Z",
     "iopub.status.idle": "2024-07-11T15:40:43.968795Z",
     "shell.execute_reply": "2024-07-11T15:40:43.967702Z"
    },
    "papermill": {
     "duration": 0.036487,
     "end_time": "2024-07-11T15:40:43.971576",
     "exception": false,
     "start_time": "2024-07-11T15:40:43.935089",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "First few rows of the dataset: \n",
      "  Permit Number  Permit Type            Permit Type Definition  \\\n",
      "0  201505065519            4                      sign - erect   \n",
      "1  201604195146            4                      sign - erect   \n",
      "2  201605278609            3  additions alterations or repairs   \n",
      "3  201611072166            8            otc alterations permit   \n",
      "4  201611283529            6                       demolitions   \n",
      "\n",
      "  Permit Creation Date Block  Lot  Street Number Street Number Suffix  \\\n",
      "0           05/06/2015  0326  023            140                  NaN   \n",
      "1           04/19/2016  0306  007            440                  NaN   \n",
      "2           05/27/2016  0595  203           1647                  NaN   \n",
      "3           11/07/2016  0156  011           1230                  NaN   \n",
      "4           11/28/2016  0342  001            950                  NaN   \n",
      "\n",
      "  Street Name Street Suffix  ...  Existing Construction Type  \\\n",
      "0       Ellis            St  ...                         3.0   \n",
      "1       Geary            St  ...                         3.0   \n",
      "2     Pacific            Av  ...                         1.0   \n",
      "3     Pacific            Av  ...                         5.0   \n",
      "4      Market            St  ...                         3.0   \n",
      "\n",
      "  Existing Construction Type Description Proposed Construction Type  \\\n",
      "0                          constr type 3                        NaN   \n",
      "1                          constr type 3                        NaN   \n",
      "2                          constr type 1                        1.0   \n",
      "3                         wood frame (5)                        5.0   \n",
      "4                          constr type 3                        NaN   \n",
      "\n",
      "  Proposed Construction Type Description Site Permit Supervisor District  \\\n",
      "0                                    NaN         NaN                 3.0   \n",
      "1                                    NaN         NaN                 3.0   \n",
      "2                          constr type 1         NaN                 3.0   \n",
      "3                         wood frame (5)         NaN                 3.0   \n",
      "4                                    NaN         NaN                 6.0   \n",
      "\n",
      "  Neighborhoods - Analysis Boundaries  Zipcode  \\\n",
      "0                          Tenderloin  94102.0   \n",
      "1                          Tenderloin  94102.0   \n",
      "2                        Russian Hill  94109.0   \n",
      "3                            Nob Hill  94109.0   \n",
      "4                          Tenderloin  94102.0   \n",
      "\n",
      "                                    Location      Record ID  \n",
      "0  (37.785719256680785, -122.40852313194863)  1380611233945  \n",
      "1   (37.78733980600732, -122.41063199757738)  1420164406718  \n",
      "2    (37.7946573324287, -122.42232562979227)  1424856504716  \n",
      "3   (37.79595867909168, -122.41557405519474)  1443574295566  \n",
      "4   (37.78315261897309, -122.40950883997789)   144548169992  \n",
      "\n",
      "[5 rows x 43 columns]\n"
     ]
    }
   ],
   "source": [
    "print('First few rows of the dataset: ')\n",
    "print(df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "be963fa8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T15:40:43.983701Z",
     "iopub.status.busy": "2024-07-11T15:40:43.982656Z",
     "iopub.status.idle": "2024-07-11T15:40:44.187008Z",
     "shell.execute_reply": "2024-07-11T15:40:44.185988Z"
    },
    "papermill": {
     "duration": 0.213232,
     "end_time": "2024-07-11T15:40:44.189762",
     "exception": false,
     "start_time": "2024-07-11T15:40:43.976530",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Summary statistics: \n",
      "         Permit Type  Street Number          Unit  Number of Existing Stories  \\\n",
      "count  198900.000000  198900.000000  29479.000000               156116.000000   \n",
      "mean        7.522323    1121.728944     78.517182                    5.705773   \n",
      "std         1.457451    1135.768948    326.981324                    8.613455   \n",
      "min         1.000000       0.000000      0.000000                    0.000000   \n",
      "25%         8.000000     235.000000      0.000000                    2.000000   \n",
      "50%         8.000000     710.000000      0.000000                    3.000000   \n",
      "75%         8.000000    1700.000000      1.000000                    4.000000   \n",
      "max         8.000000    8400.000000   6004.000000                   78.000000   \n",
      "\n",
      "       Number of Proposed Stories  Estimated Cost  Revised Cost  \\\n",
      "count               156032.000000    1.608340e+05  1.928340e+05   \n",
      "mean                     5.745043    1.689554e+05  1.328562e+05   \n",
      "std                      8.613284    3.630386e+06  3.584903e+06   \n",
      "min                      0.000000    1.000000e+00  0.000000e+00   \n",
      "25%                      2.000000    3.300000e+03  1.000000e+00   \n",
      "50%                      3.000000    1.100000e+04  7.000000e+03   \n",
      "75%                      4.000000    3.500000e+04  2.870750e+04   \n",
      "max                     78.000000    5.379586e+08  7.805000e+08   \n",
      "\n",
      "       Existing Units  Proposed Units       Plansets  \\\n",
      "count   147362.000000   147989.000000  161591.000000   \n",
      "mean        15.666164       16.510950       1.274650   \n",
      "std         74.476321       75.220444      22.407345   \n",
      "min          0.000000        0.000000       0.000000   \n",
      "25%          1.000000        1.000000       0.000000   \n",
      "50%          1.000000        2.000000       2.000000   \n",
      "75%          4.000000        4.000000       2.000000   \n",
      "max       1907.000000     1911.000000    9000.000000   \n",
      "\n",
      "       Existing Construction Type  Proposed Construction Type  \\\n",
      "count               155534.000000               155738.000000   \n",
      "mean                     4.072878                    4.089529   \n",
      "std                      1.585756                    1.578766   \n",
      "min                      1.000000                    1.000000   \n",
      "25%                      3.000000                    3.000000   \n",
      "50%                      5.000000                    5.000000   \n",
      "75%                      5.000000                    5.000000   \n",
      "max                      5.000000                    5.000000   \n",
      "\n",
      "       Supervisor District        Zipcode     Record ID  \n",
      "count        197183.000000  197184.000000  1.989000e+05  \n",
      "mean              5.538403   94115.500558  1.162048e+12  \n",
      "std               2.887041       9.270131  4.918215e+11  \n",
      "min               1.000000   94102.000000  1.293532e+10  \n",
      "25%               3.000000   94109.000000  1.308567e+12  \n",
      "50%               6.000000   94114.000000  1.371840e+12  \n",
      "75%               8.000000   94122.000000  1.435000e+12  \n",
      "max              11.000000   94158.000000  1.498342e+12  \n"
     ]
    }
   ],
   "source": [
    "print(\"Summary statistics: \")\n",
    "print(df.describe())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "96b2b79a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T15:40:44.201734Z",
     "iopub.status.busy": "2024-07-11T15:40:44.201323Z",
     "iopub.status.idle": "2024-07-11T15:40:44.457822Z",
     "shell.execute_reply": "2024-07-11T15:40:44.456762Z"
    },
    "papermill": {
     "duration": 0.265707,
     "end_time": "2024-07-11T15:40:44.460593",
     "exception": false,
     "start_time": "2024-07-11T15:40:44.194886",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset Information: \n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 198900 entries, 0 to 198899\n",
      "Data columns (total 43 columns):\n",
      " #   Column                                  Non-Null Count   Dtype  \n",
      "---  ------                                  --------------   -----  \n",
      " 0   Permit Number                           198900 non-null  object \n",
      " 1   Permit Type                             198900 non-null  int64  \n",
      " 2   Permit Type Definition                  198900 non-null  object \n",
      " 3   Permit Creation Date                    198900 non-null  object \n",
      " 4   Block                                   198900 non-null  object \n",
      " 5   Lot                                     198900 non-null  object \n",
      " 6   Street Number                           198900 non-null  int64  \n",
      " 7   Street Number Suffix                    2216 non-null    object \n",
      " 8   Street Name                             198900 non-null  object \n",
      " 9   Street Suffix                           196132 non-null  object \n",
      " 10  Unit                                    29479 non-null   float64\n",
      " 11  Unit Suffix                             1961 non-null    object \n",
      " 12  Description                             198610 non-null  object \n",
      " 13  Current Status                          198900 non-null  object \n",
      " 14  Current Status Date                     198900 non-null  object \n",
      " 15  Filed Date                              198900 non-null  object \n",
      " 16  Issued Date                             183960 non-null  object \n",
      " 17  Completed Date                          97191 non-null   object \n",
      " 18  First Construction Document Date        183954 non-null  object \n",
      " 19  Structural Notification                 6922 non-null    object \n",
      " 20  Number of Existing Stories              156116 non-null  float64\n",
      " 21  Number of Proposed Stories              156032 non-null  float64\n",
      " 22  Voluntary Soft-Story Retrofit           35 non-null      object \n",
      " 23  Fire Only Permit                        18827 non-null   object \n",
      " 24  Permit Expiration Date                  147020 non-null  object \n",
      " 25  Estimated Cost                          160834 non-null  float64\n",
      " 26  Revised Cost                            192834 non-null  float64\n",
      " 27  Existing Use                            157786 non-null  object \n",
      " 28  Existing Units                          147362 non-null  float64\n",
      " 29  Proposed Use                            156461 non-null  object \n",
      " 30  Proposed Units                          147989 non-null  float64\n",
      " 31  Plansets                                161591 non-null  float64\n",
      " 32  TIDF Compliance                         2 non-null       object \n",
      " 33  Existing Construction Type              155534 non-null  float64\n",
      " 34  Existing Construction Type Description  155534 non-null  object \n",
      " 35  Proposed Construction Type              155738 non-null  float64\n",
      " 36  Proposed Construction Type Description  155738 non-null  object \n",
      " 37  Site Permit                             5359 non-null    object \n",
      " 38  Supervisor District                     197183 non-null  float64\n",
      " 39  Neighborhoods - Analysis Boundaries     197175 non-null  object \n",
      " 40  Zipcode                                 197184 non-null  float64\n",
      " 41  Location                                197200 non-null  object \n",
      " 42  Record ID                               198900 non-null  int64  \n",
      "dtypes: float64(12), int64(3), object(28)\n",
      "memory usage: 65.3+ MB\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "print('Dataset Information: ')\n",
    "print(df.info())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "8eb83f5c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T15:40:44.473037Z",
     "iopub.status.busy": "2024-07-11T15:40:44.472287Z",
     "iopub.status.idle": "2024-07-11T15:40:44.656295Z",
     "shell.execute_reply": "2024-07-11T15:40:44.655167Z"
    },
    "papermill": {
     "duration": 0.193247,
     "end_time": "2024-07-11T15:40:44.659216",
     "exception": false,
     "start_time": "2024-07-11T15:40:44.465969",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Removing rows with missing 'Estimated Cost' and 'Revised Cost' values.\n",
      "Rows before cleaning (dropping) in Estimated Cost: 198900\n",
      "Rows after cleaning (dropping) in Estimated Cost: 160834\n",
      "Rows before cleaning (dropping) in Revised Cost: 198900\n",
      "Rows after cleaning (dropping) in Revised Cost: 192834\n",
      "Removing rows which do not have site permit\n",
      "Rows after dropping: 5359\n"
     ]
    }
   ],
   "source": [
    "print(\"Removing rows with missing 'Estimated Cost' and 'Revised Cost' values.\")\n",
    "rows_before = df.shape[0]\n",
    "print(f\"Rows before cleaning (dropping) in Estimated Cost: {rows_before}\")\n",
    "df_cleaned = df.dropna(subset=['Estimated Cost'])\n",
    "rows_after = df_cleaned.shape[0]\n",
    "print(f\"Rows after cleaning (dropping) in Estimated Cost: {rows_after}\")\n",
    "\n",
    "rows_before1 = df.shape[0]\n",
    "print(f\"Rows before cleaning (dropping) in Revised Cost: {rows_before1}\")\n",
    "df_cleaned1 = df.dropna(subset=['Revised Cost'])\n",
    "rows_after1 = df_cleaned1.shape[0]\n",
    "print(f\"Rows after cleaning (dropping) in Revised Cost: {rows_after1}\")\n",
    "\n",
    "print('Removing rows which do not have site permit')\n",
    "df_cleaned3 = df.dropna(subset=['Site Permit'])\n",
    "rows_after_site = df_cleaned3.shape[0]\n",
    "print(f\"Rows after dropping: {rows_after_site}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b6295816",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T15:40:44.671845Z",
     "iopub.status.busy": "2024-07-11T15:40:44.671418Z",
     "iopub.status.idle": "2024-07-11T15:40:45.025555Z",
     "shell.execute_reply": "2024-07-11T15:40:45.024271Z"
    },
    "papermill": {
     "duration": 0.363796,
     "end_time": "2024-07-11T15:40:45.028559",
     "exception": false,
     "start_time": "2024-07-11T15:40:44.664763",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Rows with zeto values before filling:\n",
      "       Permit Number  Permit Type            Permit Type Definition  \\\n",
      "0       201505065519            4                      sign - erect   \n",
      "1       201604195146            4                      sign - erect   \n",
      "2       201605278609            3  additions alterations or repairs   \n",
      "3       201611072166            8            otc alterations permit   \n",
      "4       201611283529            6                       demolitions   \n",
      "...              ...          ...                               ...   \n",
      "198891  201711274844            8            otc alterations permit   \n",
      "198892  201712045380            8            otc alterations permit   \n",
      "198893  201712055472            8            otc alterations permit   \n",
      "198894  201712055493            8            otc alterations permit   \n",
      "198896  201712055595            8            otc alterations permit   \n",
      "\n",
      "       Permit Creation Date Block  Lot  Street Number Street Number Suffix  \\\n",
      "0                05/06/2015  0326  023            140                  NaN   \n",
      "1                04/19/2016  0306  007            440                  NaN   \n",
      "2                05/27/2016  0595  203           1647                  NaN   \n",
      "3                11/07/2016  0156  011           1230                  NaN   \n",
      "4                11/28/2016  0342  001            950                  NaN   \n",
      "...                     ...   ...  ...            ...                  ...   \n",
      "198891           11/27/2017  0766  008            590                  NaN   \n",
      "198892           12/04/2017  1180  021           1543                  NaN   \n",
      "198893           12/05/2017  1000  014           3018                  NaN   \n",
      "198894           12/05/2017  3522  006            340                  NaN   \n",
      "198896           12/05/2017  0271  014            580                  NaN   \n",
      "\n",
      "       Street Name Street Suffix  ...  Existing Construction Type  \\\n",
      "0            Ellis            St  ...                         3.0   \n",
      "1            Geary            St  ...                         3.0   \n",
      "2          Pacific            Av  ...                         1.0   \n",
      "3          Pacific            Av  ...                         5.0   \n",
      "4           Market            St  ...                         3.0   \n",
      "...            ...           ...  ...                         ...   \n",
      "198891    Van Ness            Av  ...                         3.0   \n",
      "198892  Mcallister            St  ...                         5.0   \n",
      "198893        Clay            St  ...                         5.0   \n",
      "198894        12th            St  ...                         5.0   \n",
      "198896        Bush            St  ...                         5.0   \n",
      "\n",
      "       Existing Construction Type Description Proposed Construction Type  \\\n",
      "0                               constr type 3                        NaN   \n",
      "1                               constr type 3                        NaN   \n",
      "2                               constr type 1                        1.0   \n",
      "3                              wood frame (5)                        5.0   \n",
      "4                               constr type 3                        NaN   \n",
      "...                                       ...                        ...   \n",
      "198891                          constr type 3                        3.0   \n",
      "198892                         wood frame (5)                        5.0   \n",
      "198893                         wood frame (5)                        5.0   \n",
      "198894                         wood frame (5)                        5.0   \n",
      "198896                         wood frame (5)                        5.0   \n",
      "\n",
      "       Proposed Construction Type Description Site Permit Supervisor District  \\\n",
      "0                                         NaN         NaN                 3.0   \n",
      "1                                         NaN         NaN                 3.0   \n",
      "2                               constr type 1         NaN                 3.0   \n",
      "3                              wood frame (5)         NaN                 3.0   \n",
      "4                                         NaN         NaN                 6.0   \n",
      "...                                       ...         ...                 ...   \n",
      "198891                          constr type 3         NaN                 NaN   \n",
      "198892                         wood frame (5)         NaN                 NaN   \n",
      "198893                         wood frame (5)         NaN                 NaN   \n",
      "198894                         wood frame (5)         NaN                 NaN   \n",
      "198896                         wood frame (5)         NaN                 NaN   \n",
      "\n",
      "       Neighborhoods - Analysis Boundaries  Zipcode  \\\n",
      "0                               Tenderloin  94102.0   \n",
      "1                               Tenderloin  94102.0   \n",
      "2                             Russian Hill  94109.0   \n",
      "3                                 Nob Hill  94109.0   \n",
      "4                               Tenderloin  94102.0   \n",
      "...                                    ...      ...   \n",
      "198891                                 NaN      NaN   \n",
      "198892                                 NaN      NaN   \n",
      "198893                                 NaN      NaN   \n",
      "198894                                 NaN      NaN   \n",
      "198896                                 NaN      NaN   \n",
      "\n",
      "                                         Location      Record ID  \n",
      "0       (37.785719256680785, -122.40852313194863)  1380611233945  \n",
      "1        (37.78733980600732, -122.41063199757738)  1420164406718  \n",
      "2         (37.7946573324287, -122.42232562979227)  1424856504716  \n",
      "3        (37.79595867909168, -122.41557405519474)  1443574295566  \n",
      "4        (37.78315261897309, -122.40950883997789)   144548169992  \n",
      "...                                           ...            ...  \n",
      "198891                                        NaN   148838081446  \n",
      "198892                                        NaN   148916691540  \n",
      "198893                                        NaN  1489281258414  \n",
      "198894                                        NaN  1489308256860  \n",
      "198896                                        NaN  1489462354993  \n",
      "\n",
      "[160834 rows x 43 columns]\n"
     ]
    }
   ],
   "source": [
    "print('Rows with zeto values before filling:')\n",
    "print(df_cleaned[df_cleaned.isnull().any(axis=1)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "cae18606",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T15:40:45.041797Z",
     "iopub.status.busy": "2024-07-11T15:40:45.041385Z",
     "iopub.status.idle": "2024-07-11T15:40:45.696818Z",
     "shell.execute_reply": "2024-07-11T15:40:45.695759Z"
    },
    "papermill": {
     "duration": 0.664897,
     "end_time": "2024-07-11T15:40:45.699259",
     "exception": false,
     "start_time": "2024-07-11T15:40:45.034362",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Filling missing values with 0\n",
      "Empty DataFrame\n",
      "Columns: [Permit Number, Permit Type, Permit Type Definition, Permit Creation Date, Block, Lot, Street Number, Street Number Suffix, Street Name, Street Suffix, Unit, Unit Suffix, Description, Current Status, Current Status Date, Filed Date, Issued Date, Completed Date, First Construction Document Date, Structural Notification, Number of Existing Stories, Number of Proposed Stories, Voluntary Soft-Story Retrofit, Fire Only Permit, Permit Expiration Date, Estimated Cost, Revised Cost, Existing Use, Existing Units, Proposed Use, Proposed Units, Plansets, TIDF Compliance, Existing Construction Type, Existing Construction Type Description, Proposed Construction Type, Proposed Construction Type Description, Site Permit, Supervisor District, Neighborhoods - Analysis Boundaries, Zipcode, Location, Record ID]\n",
      "Index: []\n",
      "\n",
      "[0 rows x 43 columns]\n"
     ]
    }
   ],
   "source": [
    "print('Filling missing values with 0')\n",
    "df_filled = df_cleaned.fillna(0)\n",
    "print(df_filled[df_filled.isnull().any(axis=1)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "8628aee5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T15:40:45.713554Z",
     "iopub.status.busy": "2024-07-11T15:40:45.712591Z",
     "iopub.status.idle": "2024-07-11T15:40:45.735516Z",
     "shell.execute_reply": "2024-07-11T15:40:45.734435Z"
    },
    "papermill": {
     "duration": 0.032909,
     "end_time": "2024-07-11T15:40:45.738106",
     "exception": false,
     "start_time": "2024-07-11T15:40:45.705197",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Rows before filtering: 160834\n",
      "Rows after filtering: 15142\n"
     ]
    }
   ],
   "source": [
    "threshold_value = 15\n",
    "df_filtered = df_filled[df_filled['Number of Existing Stories']>= threshold_value]\n",
    "rows_before = df_filled.shape[0]\n",
    "rows_after = df_filtered.shape[0]\n",
    "\n",
    "print(f\"Rows before filtering: {rows_before}\")\n",
    "print(f\"Rows after filtering: {rows_after}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "4954279f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T15:40:45.751465Z",
     "iopub.status.busy": "2024-07-11T15:40:45.751100Z",
     "iopub.status.idle": "2024-07-11T15:40:45.766981Z",
     "shell.execute_reply": "2024-07-11T15:40:45.765843Z"
    },
    "papermill": {
     "duration": 0.027992,
     "end_time": "2024-07-11T15:40:45.772046",
     "exception": false,
     "start_time": "2024-07-11T15:40:45.744054",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Permit Number  Permit Type  Permit Type Definition Permit Creation Date  \\\n",
      "115  201702109136            4            sign - erect           02/10/2017   \n",
      "123  201704275068            8  otc alterations permit           04/27/2017   \n",
      "132  201706018107            8  otc alterations permit           06/01/2017   \n",
      "135  201706078648            8  otc alterations permit           06/07/2017   \n",
      "142  201706270487            8  otc alterations permit           06/27/2017   \n",
      "\n",
      "    Block  Lot  Street Number Street Number Suffix     Street Name  \\\n",
      "115  3707  016             90                    0  New Montgomery   \n",
      "123  3738  011            301                    0          Howard   \n",
      "132  3708  028             71                    0       Stevenson   \n",
      "135  0295  008            450                    0          Powell   \n",
      "142  0297  028            515                    0           Mason   \n",
      "\n",
      "    Street Suffix  ...  Existing Construction Type  \\\n",
      "115            St  ...                         1.0   \n",
      "123            St  ...                         1.0   \n",
      "132            St  ...                         1.0   \n",
      "135            St  ...                         2.0   \n",
      "142            St  ...                         1.0   \n",
      "\n",
      "    Existing Construction Type Description Proposed Construction Type  \\\n",
      "115                          constr type 1                        0.0   \n",
      "123                          constr type 1                        1.0   \n",
      "132                          constr type 1                        1.0   \n",
      "135                          constr type 2                        2.0   \n",
      "142                          constr type 1                        1.0   \n",
      "\n",
      "    Proposed Construction Type Description Site Permit Supervisor District  \\\n",
      "115                                      0           0                 6.0   \n",
      "123                          constr type 1           0                 6.0   \n",
      "132                          constr type 1           0                 6.0   \n",
      "135                          constr type 2           0                 3.0   \n",
      "142                          constr type 1           0                 3.0   \n",
      "\n",
      "    Neighborhoods - Analysis Boundaries  Zipcode  \\\n",
      "115      Financial District/South Beach  94105.0   \n",
      "123      Financial District/South Beach  94105.0   \n",
      "132      Financial District/South Beach  94105.0   \n",
      "135      Financial District/South Beach  94108.0   \n",
      "142                            Nob Hill  94102.0   \n",
      "\n",
      "                                     Location      Record ID  \n",
      "115  (37.78742256247351, -122.40093229776461)  1452944164483  \n",
      "123  (37.78951790121917, -122.39426523763933)  1461057165667  \n",
      "132   (37.7893842722688, -122.39965909072765)  1465205164522  \n",
      "135   (37.7889844563134, -122.40822615293433)  1465981233628  \n",
      "142  (37.78831830234988, -122.41054888775284)  1468527493134  \n",
      "\n",
      "[5 rows x 43 columns]\n"
     ]
    }
   ],
   "source": [
    "print(df_filtered.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "ddafac9c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T15:40:45.789880Z",
     "iopub.status.busy": "2024-07-11T15:40:45.789233Z",
     "iopub.status.idle": "2024-07-11T15:40:45.806976Z",
     "shell.execute_reply": "2024-07-11T15:40:45.805891Z"
    },
    "papermill": {
     "duration": 0.030275,
     "end_time": "2024-07-11T15:40:45.809589",
     "exception": false,
     "start_time": "2024-07-11T15:40:45.779314",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       Permit Number  Permit Type  Permit Type Definition  \\\n",
      "198839  201802232145            8  otc alterations permit   \n",
      "198845  201802232149            8  otc alterations permit   \n",
      "198849  201802232153            8  otc alterations permit   \n",
      "198856  201802232157            8  otc alterations permit   \n",
      "198857  201802232158            8  otc alterations permit   \n",
      "\n",
      "       Permit Creation Date  Block  Lot  Street Number Street Number Suffix  \\\n",
      "198839           02/23/2018   0311  015              1                    0   \n",
      "198845           02/23/2018  0215C  033           1333                    0   \n",
      "198849           02/23/2018   0291  012             44                    0   \n",
      "198856           02/23/2018   0259  026            555                    0   \n",
      "198857           02/23/2018   3717  021            150                    0   \n",
      "\n",
      "       Street Name Street Suffix  ...  Existing Construction Type  \\\n",
      "198839        Post            St  ...                         1.0   \n",
      "198845       Jones            St  ...                         1.0   \n",
      "198849  Montgomery            St  ...                         1.0   \n",
      "198856  California            St  ...                         1.0   \n",
      "198857       Spear            St  ...                         1.0   \n",
      "\n",
      "       Existing Construction Type Description Proposed Construction Type  \\\n",
      "198839                          constr type 1                        1.0   \n",
      "198845                          constr type 1                        1.0   \n",
      "198849                          constr type 1                        1.0   \n",
      "198856                          constr type 1                        1.0   \n",
      "198857                          constr type 1                        1.0   \n",
      "\n",
      "       Proposed Construction Type Description Site Permit Supervisor District  \\\n",
      "198839                          constr type 1           0                 3.0   \n",
      "198845                          constr type 1           0                 3.0   \n",
      "198849                          constr type 1           0                 3.0   \n",
      "198856                          constr type 1           0                 3.0   \n",
      "198857                          constr type 1           0                 6.0   \n",
      "\n",
      "       Neighborhoods - Analysis Boundaries  Zipcode  \\\n",
      "198839      Financial District/South Beach  94104.0   \n",
      "198845                            Nob Hill  94109.0   \n",
      "198849      Financial District/South Beach  94104.0   \n",
      "198856      Financial District/South Beach  94104.0   \n",
      "198857      Financial District/South Beach  94105.0   \n",
      "\n",
      "                                        Location      Record ID  \n",
      "198839  (37.78873939880986, -122.40250914685684)  1498295305172  \n",
      "198845  (37.79362102799777, -122.41488237355445)  1498301434578  \n",
      "198849  (37.78977799888473, -122.40173648131338)   149830567101  \n",
      "198856   (37.79226164705184, -122.4034859571375)  1498312298587  \n",
      "198857   (37.7917533906292, -122.39361386014191)  1498313164642  \n",
      "\n",
      "[5 rows x 43 columns]\n"
     ]
    }
   ],
   "source": [
    "print(df_filtered.tail())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "da935f7a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T15:40:45.827447Z",
     "iopub.status.busy": "2024-07-11T15:40:45.826518Z",
     "iopub.status.idle": "2024-07-11T15:40:45.831702Z",
     "shell.execute_reply": "2024-07-11T15:40:45.830613Z"
    },
    "papermill": {
     "duration": 0.016708,
     "end_time": "2024-07-11T15:40:45.833915",
     "exception": false,
     "start_time": "2024-07-11T15:40:45.817207",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "c71457c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T15:40:45.847848Z",
     "iopub.status.busy": "2024-07-11T15:40:45.847445Z",
     "iopub.status.idle": "2024-07-11T15:40:45.853918Z",
     "shell.execute_reply": "2024-07-11T15:40:45.852755Z"
    },
    "papermill": {
     "duration": 0.016229,
     "end_time": "2024-07-11T15:40:45.856332",
     "exception": false,
     "start_time": "2024-07-11T15:40:45.840103",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "estimated_cost = df_filtered['Estimated Cost'].to_numpy()\n",
    "revised_cost = df_filtered['Revised Cost'].to_numpy()\n",
    "existing_units = df_filtered['Existing Units'].to_numpy()\n",
    "proposed_units = df_filtered['Proposed Units'].to_numpy()\n",
    "existing_stories = df_filtered['Number of Existing Stories'].to_numpy()\n",
    "proposed_stories = df_filtered['Number of Proposed Stories'].to_numpy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "2a197570",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T15:40:45.873838Z",
     "iopub.status.busy": "2024-07-11T15:40:45.873427Z",
     "iopub.status.idle": "2024-07-11T15:40:45.884133Z",
     "shell.execute_reply": "2024-07-11T15:40:45.881707Z"
    },
    "papermill": {
     "duration": 0.023651,
     "end_time": "2024-07-11T15:40:45.886528",
     "exception": false,
     "start_time": "2024-07-11T15:40:45.862877",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "revised and estimated cost diff:  [      0.       0.       0. ...  -30000.   -8000. -585000.]\n",
      "total units per permit:  [   75000.  2208000.  2300000. ...  1290000.   416000. 10530000.]\n",
      "new number of total stories:  [ 15.  46.  46. ...  86. 104.  36.]\n"
     ]
    }
   ],
   "source": [
    "# Element wise subtraction\n",
    "cost_diff = np.subtract(revised_cost, estimated_cost)\n",
    "#element wise ultiplication\n",
    "unit_prod = np.multiply(estimated_cost, existing_stories)\n",
    "# Element wise addition\n",
    "stories_sum = np.add(existing_stories, proposed_stories)\n",
    "\n",
    "print(\"revised and estimated cost diff: \",cost_diff)\n",
    "print(\"total units per permit: \", unit_prod)\n",
    "print(\"new number of total stories: \", stories_sum)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "6692def9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T15:40:45.904748Z",
     "iopub.status.busy": "2024-07-11T15:40:45.903206Z",
     "iopub.status.idle": "2024-07-11T15:40:45.913576Z",
     "shell.execute_reply": "2024-07-11T15:40:45.911536Z"
    },
    "papermill": {
     "duration": 0.023905,
     "end_time": "2024-07-11T15:40:45.916999",
     "exception": false,
     "start_time": "2024-07-11T15:40:45.893094",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2. Top 5 tallest buildings:\n",
      "[63. 63. 63. 63. 78.]\n"
     ]
    }
   ],
   "source": [
    "sorted_stories = np.sort(existing_stories)\n",
    "top_5_stories = sorted_stories[-5:]\n",
    "bottom_5_stories = sorted_stories[:5]\n",
    "print(\"2. Top 5 tallest buildings:\")\n",
    "print(top_5_stories)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "88bf2dd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T15:40:45.935643Z",
     "iopub.status.busy": "2024-07-11T15:40:45.935148Z",
     "iopub.status.idle": "2024-07-11T15:40:45.945102Z",
     "shell.execute_reply": "2024-07-11T15:40:45.943923Z"
    },
    "papermill": {
     "duration": 0.022816,
     "end_time": "2024-07-11T15:40:45.947470",
     "exception": false,
     "start_time": "2024-07-11T15:40:45.924654",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean:  64.9276185444459\n",
      "Median:  26.0\n"
     ]
    }
   ],
   "source": [
    "mean_units = np.mean(existing_units)\n",
    "median_units = np.median(existing_stories)\n",
    "print(\"Mean: \", mean_units)\n",
    "print(\"Median: \", median_units)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "bbb0d322",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T15:40:45.961627Z",
     "iopub.status.busy": "2024-07-11T15:40:45.961228Z",
     "iopub.status.idle": "2024-07-11T15:40:46.409943Z",
     "shell.execute_reply": "2024-07-11T15:40:46.408773Z"
    },
    "papermill": {
     "duration": 0.458384,
     "end_time": "2024-07-11T15:40:46.412263",
     "exception": false,
     "start_time": "2024-07-11T15:40:45.953879",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 640x480 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "plt.barh(range(len(top_5_stories)), top_5_stories, color='black')\n",
    "plt.xlabel('Number of Existing Stories')\n",
    "plt.ylabel('Top 5 Tallest buildigs')\n",
    "plt.title('Top 5 Tallest buildings based on number of exisitng stories')\n",
    "plt.yticks(range(len(top_5_stories)), ['Building {}'.format(i+1) for i in range(len(top_5_stories))])\n",
    "# plt.grid(axis='x')\n",
    "plt.grid()\n",
    "plt.show()\n",
    "plt.savefig('bar_plot.png',dpi=300)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 16432,
     "sourceId": 21688,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30732,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 9.616206,
   "end_time": "2024-07-11T15:40:47.040422",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-07-11T15:40:37.424216",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
