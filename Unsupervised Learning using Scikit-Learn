{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5fb2b5af",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-07-11T15:34:11.688991Z",
     "iopub.status.busy": "2024-07-11T15:34:11.688572Z",
     "iopub.status.idle": "2024-07-11T15:34:11.713758Z",
     "shell.execute_reply": "2024-07-11T15:34:11.712641Z"
    },
    "papermill": {
     "duration": 0.035518,
     "end_time": "2024-07-11T15:34:11.716859",
     "exception": false,
     "start_time": "2024-07-11T15:34:11.681341",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Mani_data_20thMay24.csv']\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "print(os.listdir('../input/customer-sales-data'))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "274fb0ac",
   "metadata": {
    "papermill": {
     "duration": 0.004409,
     "end_time": "2024-07-11T15:34:11.726609",
     "exception": false,
     "start_time": "2024-07-11T15:34:11.722200",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "import, load and print the data from the csv file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e4a7f914",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T15:34:11.738510Z",
     "iopub.status.busy": "2024-07-11T15:34:11.737167Z",
     "iopub.status.idle": "2024-07-11T15:34:13.006194Z",
     "shell.execute_reply": "2024-07-11T15:34:13.004555Z"
    },
    "papermill": {
     "duration": 1.27797,
     "end_time": "2024-07-11T15:34:13.009158",
     "exception": false,
     "start_time": "2024-07-11T15:34:11.731188",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 185080 entries, 0 to 185079\n",
      "Data columns (total 3 columns):\n",
      " #   Column       Non-Null Count   Dtype  \n",
      "---  ------       --------------   -----  \n",
      " 0   Age          185080 non-null  int64  \n",
      " 1   City         126535 non-null  object \n",
      " 2   Total Sales  185080 non-null  float64\n",
      "dtypes: float64(1), int64(1), object(1)\n",
      "memory usage: 4.2+ MB\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Total Sales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>185080.000000</td>\n",
       "      <td>1.850800e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>44.583250</td>\n",
       "      <td>1.271475e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>28.935321</td>\n",
       "      <td>1.044392e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>-8.506100e+02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>29.000000</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>47.000000</td>\n",
       "      <td>3.296000e+01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>65.000000</td>\n",
       "      <td>8.119225e+02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1831.000000</td>\n",
       "      <td>4.453611e+07</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 Age   Total Sales\n",
       "count  185080.000000  1.850800e+05\n",
       "mean       44.583250  1.271475e+03\n",
       "std        28.935321  1.044392e+05\n",
       "min         0.000000 -8.506100e+02\n",
       "25%        29.000000  0.000000e+00\n",
       "50%        47.000000  3.296000e+01\n",
       "75%        65.000000  8.119225e+02\n",
       "max      1831.000000  4.453611e+07"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "file_path = '../input/customer-sales-data/Mani_data_20thMay24.csv'\n",
    "df = pd.read_csv(file_path)\n",
    "df.head()\n",
    "df.tail()\n",
    "df.info()\n",
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "1aab999b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T15:34:13.021843Z",
     "iopub.status.busy": "2024-07-11T15:34:13.021382Z",
     "iopub.status.idle": "2024-07-11T15:34:13.059878Z",
     "shell.execute_reply": "2024-07-11T15:34:13.058686Z"
    },
    "papermill": {
     "duration": 0.048376,
     "end_time": "2024-07-11T15:34:13.062854",
     "exception": false,
     "start_time": "2024-07-11T15:34:13.014478",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = df.dropna(subset=['City'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8cc88913",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T15:34:13.075320Z",
     "iopub.status.busy": "2024-07-11T15:34:13.074926Z",
     "iopub.status.idle": "2024-07-11T15:34:13.096917Z",
     "shell.execute_reply": "2024-07-11T15:34:13.095436Z"
    },
    "papermill": {
     "duration": 0.031467,
     "end_time": "2024-07-11T15:34:13.099679",
     "exception": false,
     "start_time": "2024-07-11T15:34:13.068212",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Empty DataFrame\n",
      "Columns: [Age, City, Total Sales]\n",
      "Index: []\n"
     ]
    }
   ],
   "source": [
    "records_with_null_city = df[df['City'].isnull()]\n",
    "print(records_with_null_city)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8782afea",
   "metadata": {
    "papermill": {
     "duration": 0.005036,
     "end_time": "2024-07-11T15:34:13.110262",
     "exception": false,
     "start_time": "2024-07-11T15:34:13.105226",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "unsupervised learning"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "868fc96a",
   "metadata": {
    "papermill": {
     "duration": 0.004922,
     "end_time": "2024-07-11T15:34:13.120653",
     "exception": false,
     "start_time": "2024-07-11T15:34:13.115731",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "converting to numbers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "4481a621",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T15:34:13.133910Z",
     "iopub.status.busy": "2024-07-11T15:34:13.133466Z",
     "iopub.status.idle": "2024-07-11T15:34:14.426005Z",
     "shell.execute_reply": "2024-07-11T15:34:14.424916Z"
    },
    "papermill": {
     "duration": 1.302279,
     "end_time": "2024-07-11T15:34:14.428699",
     "exception": false,
     "start_time": "2024-07-11T15:34:13.126420",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        Age                  City  Total Sales  City_encoded\n",
      "1        41  SASKATOON                 8654.14          1823\n",
      "4         0  SASKATOON             44536105.29          1823\n",
      "8        86  SASKATOON                10974.11          1823\n",
      "10       89  SASKATOON                 2628.89          1823\n",
      "14       97  SASKATOON                  368.29          1823\n",
      "...     ...                   ...          ...           ...\n",
      "182929   65  SASKATOON                  294.30          1823\n",
      "182930   54  HUMBOLDT                   294.47           935\n",
      "182931   36  SASKATOON                  375.83          1823\n",
      "182932   69  SASKATOON                   86.54          1823\n",
      "182933   65  WARMAN                    3908.21          2267\n",
      "\n",
      "[126535 rows x 4 columns]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "label_encoder = LabelEncoder()\n",
    "df['City_encoded'] = label_encoder.fit_transform(df['City'])\n",
    "print(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "25a85800",
   "metadata": {
    "papermill": {
     "duration": 0.005417,
     "end_time": "2024-07-11T15:34:14.439425",
     "exception": false,
     "start_time": "2024-07-11T15:34:14.434008",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "k-means clustring"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "74daf663",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T15:34:14.451966Z",
     "iopub.status.busy": "2024-07-11T15:34:14.451489Z",
     "iopub.status.idle": "2024-07-11T15:34:16.323034Z",
     "shell.execute_reply": "2024-07-11T15:34:16.321665Z"
    },
    "papermill": {
     "duration": 1.881525,
     "end_time": "2024-07-11T15:34:16.326216",
     "exception": false,
     "start_time": "2024-07-11T15:34:14.444691",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        Age                  City  Total Sales  City_encoded  Cluster\n",
      "1        41  SASKATOON                 8654.14          1823        0\n",
      "4         0  SASKATOON             44536105.29          1823        1\n",
      "8        86  SASKATOON                10974.11          1823        0\n",
      "10       89  SASKATOON                 2628.89          1823        0\n",
      "14       97  SASKATOON                  368.29          1823        0\n",
      "...     ...                   ...          ...           ...      ...\n",
      "182929   65  SASKATOON                  294.30          1823        0\n",
      "182930   54  HUMBOLDT                   294.47           935        0\n",
      "182931   36  SASKATOON                  375.83          1823        0\n",
      "182932   69  SASKATOON                   86.54          1823        0\n",
      "182933   65  WARMAN                    3908.21          2267        0\n",
      "\n",
      "[126535 rows x 5 columns]\n"
     ]
    }
   ],
   "source": [
    "#no targets, no Y\n",
    "from sklearn.cluster import KMeans\n",
    "\n",
    "X = df[['Age','Total Sales']]\n",
    "kmeans = KMeans(n_clusters=3, random_state=42)\n",
    "\n",
    "df['Cluster'] = kmeans.fit_predict(X)\n",
    "print(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4d542bf1",
   "metadata": {
    "papermill": {
     "duration": 0.005295,
     "end_time": "2024-07-11T15:34:16.337299",
     "exception": false,
     "start_time": "2024-07-11T15:34:16.332004",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "visualize"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "87eea37a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T15:34:16.350384Z",
     "iopub.status.busy": "2024-07-11T15:34:16.349944Z",
     "iopub.status.idle": "2024-07-11T15:34:17.260017Z",
     "shell.execute_reply": "2024-07-11T15:34:17.258635Z"
    },
    "papermill": {
     "duration": 0.919502,
     "end_time": "2024-07-11T15:34:17.262447",
     "exception": false,
     "start_time": "2024-07-11T15:34:16.342945",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "colors = ['red', 'blue', 'green']\n",
    "for cluster in range(3):\n",
    "    subset = df[df['Cluster']==cluster]\n",
    "    plt.scatter(subset['Age'], subset['Total Sales'], label=f'Cluster{cluster}', c=colors[cluster])\n",
    "    plt.title('Customer Segmenets Based on Age and Total Sales')\n",
    "    plt.xlabel('Age')\n",
    "    plt.ylabel('Total Sales')\n",
    "    "
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 5051956,
     "sourceId": 8472224,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30732,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 9.78197,
   "end_time": "2024-07-11T15:34:18.092746",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-07-11T15:34:08.310776",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
