{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c59cfcdb",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-07-11T15:35:05.142590Z",
     "iopub.status.busy": "2024-07-11T15:35:05.141909Z",
     "iopub.status.idle": "2024-07-11T15:35:05.156652Z",
     "shell.execute_reply": "2024-07-11T15:35:05.155632Z"
    },
    "papermill": {
     "duration": 0.022517,
     "end_time": "2024-07-11T15:35:05.158893",
     "exception": false,
     "start_time": "2024-07-11T15:35:05.136376",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Property Sales of Melbourne City.csv']\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "print(os.listdir('../input/property-salesmelbourne-city'))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "12a09cae",
   "metadata": {
    "papermill": {
     "duration": 0.003245,
     "end_time": "2024-07-11T15:35:05.166395",
     "exception": false,
     "start_time": "2024-07-11T15:35:05.163150",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "SUPERVISED LEARNING USING SCIKIT LEARN: DECISION TREE BASED"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5de0034d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T15:35:05.174877Z",
     "iopub.status.busy": "2024-07-11T15:35:05.174229Z",
     "iopub.status.idle": "2024-07-11T15:35:06.131846Z",
     "shell.execute_reply": "2024-07-11T15:35:06.130731Z"
    },
    "papermill": {
     "duration": 0.96447,
     "end_time": "2024-07-11T15:35:06.134211",
     "exception": false,
     "start_time": "2024-07-11T15:35:05.169741",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 18396 entries, 0 to 18395\n",
      "Data columns (total 22 columns):\n",
      " #   Column         Non-Null Count  Dtype  \n",
      "---  ------         --------------  -----  \n",
      " 0   Unnamed: 0     18396 non-null  int64  \n",
      " 1   Suburb         18396 non-null  object \n",
      " 2   Address        18396 non-null  object \n",
      " 3   Rooms          18396 non-null  int64  \n",
      " 4   Type           18396 non-null  object \n",
      " 5   Price          18396 non-null  int64  \n",
      " 6   Method         18396 non-null  object \n",
      " 7   SellerG        18396 non-null  object \n",
      " 8   Date           18396 non-null  object \n",
      " 9   Distance       18395 non-null  float64\n",
      " 10  Postcode       18395 non-null  float64\n",
      " 11  Bedroom2       14927 non-null  float64\n",
      " 12  Bathroom       14925 non-null  float64\n",
      " 13  Car            14820 non-null  float64\n",
      " 14  Landsize       13603 non-null  float64\n",
      " 15  BuildingArea   7762 non-null   float64\n",
      " 16  YearBuilt      8958 non-null   float64\n",
      " 17  CouncilArea    12233 non-null  object \n",
      " 18  Lattitude      15064 non-null  float64\n",
      " 19  Longtitude     15064 non-null  float64\n",
      " 20  Regionname     18395 non-null  object \n",
      " 21  Propertycount  18395 non-null  float64\n",
      "dtypes: float64(11), int64(3), object(8)\n",
      "memory usage: 3.1+ MB\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "melbourne_file_path = '../input/property-salesmelbourne-city/Property Sales of Melbourne City.csv'\n",
    "melbourne_data = pd.read_csv(melbourne_file_path)\n",
    "melbourne_data.head()\n",
    "melbourne_data.columns\n",
    "melbourne_data.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "92261389",
   "metadata": {
    "papermill": {
     "duration": 0.003448,
     "end_time": "2024-07-11T15:35:06.141267",
     "exception": false,
     "start_time": "2024-07-11T15:35:06.137819",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "cleaning the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a49c206a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T15:35:06.149995Z",
     "iopub.status.busy": "2024-07-11T15:35:06.149283Z",
     "iopub.status.idle": "2024-07-11T15:35:06.168125Z",
     "shell.execute_reply": "2024-07-11T15:35:06.166907Z"
    },
    "papermill": {
     "duration": 0.025546,
     "end_time": "2024-07-11T15:35:06.170251",
     "exception": false,
     "start_time": "2024-07-11T15:35:06.144705",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6196\n"
     ]
    }
   ],
   "source": [
    "melbourne_data = melbourne_data.dropna(axis=0)\n",
    "rows_before = melbourne_data.shape[0]\n",
    "print(rows_before)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b7ffe5d5",
   "metadata": {
    "papermill": {
     "duration": 0.003343,
     "end_time": "2024-07-11T15:35:06.177259",
     "exception": false,
     "start_time": "2024-07-11T15:35:06.173916",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "ML part"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b3384d75",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T15:35:06.185859Z",
     "iopub.status.busy": "2024-07-11T15:35:06.185497Z",
     "iopub.status.idle": "2024-07-11T15:35:06.217235Z",
     "shell.execute_reply": "2024-07-11T15:35:06.216236Z"
    },
    "papermill": {
     "duration": 0.038736,
     "end_time": "2024-07-11T15:35:06.219584",
     "exception": false,
     "start_time": "2024-07-11T15:35:06.180848",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Rooms</th>\n",
       "      <th>Bathroom</th>\n",
       "      <th>Landsize</th>\n",
       "      <th>Lattitude</th>\n",
       "      <th>Longtitude</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>6196.000000</td>\n",
       "      <td>6196.000000</td>\n",
       "      <td>6196.000000</td>\n",
       "      <td>6196.000000</td>\n",
       "      <td>6196.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2.931407</td>\n",
       "      <td>1.576340</td>\n",
       "      <td>471.006940</td>\n",
       "      <td>-37.807904</td>\n",
       "      <td>144.990201</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.971079</td>\n",
       "      <td>0.711362</td>\n",
       "      <td>897.449881</td>\n",
       "      <td>0.075850</td>\n",
       "      <td>0.099165</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-38.164920</td>\n",
       "      <td>144.542370</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>152.000000</td>\n",
       "      <td>-37.855438</td>\n",
       "      <td>144.926198</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>373.000000</td>\n",
       "      <td>-37.802250</td>\n",
       "      <td>144.995800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>4.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>628.000000</td>\n",
       "      <td>-37.758200</td>\n",
       "      <td>145.052700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>8.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>37000.000000</td>\n",
       "      <td>-37.457090</td>\n",
       "      <td>145.526350</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Rooms     Bathroom      Landsize    Lattitude   Longtitude\n",
       "count  6196.000000  6196.000000   6196.000000  6196.000000  6196.000000\n",
       "mean      2.931407     1.576340    471.006940   -37.807904   144.990201\n",
       "std       0.971079     0.711362    897.449881     0.075850     0.099165\n",
       "min       1.000000     1.000000      0.000000   -38.164920   144.542370\n",
       "25%       2.000000     1.000000    152.000000   -37.855438   144.926198\n",
       "50%       3.000000     1.000000    373.000000   -37.802250   144.995800\n",
       "75%       4.000000     2.000000    628.000000   -37.758200   145.052700\n",
       "max       8.000000     8.000000  37000.000000   -37.457090   145.526350"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#prediction target Y\n",
    "#features X\n",
    "y = melbourne_data.Price\n",
    "melbourne_features = ['Rooms', 'Bathroom', 'Landsize', 'Lattitude', 'Longtitude']\n",
    "X = melbourne_data[melbourne_features]\n",
    "\n",
    "X.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "017584aa",
   "metadata": {
    "papermill": {
     "duration": 0.003698,
     "end_time": "2024-07-11T15:35:06.227299",
     "exception": false,
     "start_time": "2024-07-11T15:35:06.223601",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "to produce continous values of house values, import the following class."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "6d50ed11",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T15:35:06.237024Z",
     "iopub.status.busy": "2024-07-11T15:35:06.236315Z",
     "iopub.status.idle": "2024-07-11T15:35:07.632109Z",
     "shell.execute_reply": "2024-07-11T15:35:07.631028Z"
    },
    "papermill": {
     "duration": 1.403672,
     "end_time": "2024-07-11T15:35:07.634856",
     "exception": false,
     "start_time": "2024-07-11T15:35:06.231184",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.tree import DecisionTreeRegressor\n",
    "\n",
    "melbourne_model = DecisionTreeRegressor(random_state = 1)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "807f1eeb",
   "metadata": {
    "papermill": {
     "duration": 0.003655,
     "end_time": "2024-07-11T15:35:07.642545",
     "exception": false,
     "start_time": "2024-07-11T15:35:07.638890",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "fit the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "1c865e5b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T15:35:07.651786Z",
     "iopub.status.busy": "2024-07-11T15:35:07.651411Z",
     "iopub.status.idle": "2024-07-11T15:35:07.693446Z",
     "shell.execute_reply": "2024-07-11T15:35:07.692417Z"
    },
    "papermill": {
     "duration": 0.049259,
     "end_time": "2024-07-11T15:35:07.695645",
     "exception": false,
     "start_time": "2024-07-11T15:35:07.646386",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeRegressor(random_state=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeRegressor</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeRegressor(random_state=1)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "DecisionTreeRegressor(random_state=1)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "melbourne_model.fit(X,y)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bda1cee0",
   "metadata": {
    "papermill": {
     "duration": 0.003786,
     "end_time": "2024-07-11T15:35:07.703959",
     "exception": false,
     "start_time": "2024-07-11T15:35:07.700173",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "predict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6ec6458d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T15:35:07.714028Z",
     "iopub.status.busy": "2024-07-11T15:35:07.713147Z",
     "iopub.status.idle": "2024-07-11T15:35:07.724792Z",
     "shell.execute_reply": "2024-07-11T15:35:07.723779Z"
    },
    "papermill": {
     "duration": 0.01938,
     "end_time": "2024-07-11T15:35:07.727304",
     "exception": false,
     "start_time": "2024-07-11T15:35:07.707924",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predicting for the following 5 houses:\n",
      "   Rooms  Bathroom  Landsize  Lattitude  Longtitude\n",
      "1      2       1.0     156.0   -37.8079    144.9934\n",
      "2      3       2.0     134.0   -37.8093    144.9944\n",
      "4      4       1.0     120.0   -37.8072    144.9941\n",
      "6      3       2.0     245.0   -37.8024    144.9993\n",
      "7      2       1.0     256.0   -37.8060    144.9954\n",
      "The predictions are: \n",
      "[1035000. 1465000. 1600000. 1876000. 1636000.]\n",
      "True value are:\n",
      "1    1035000\n",
      "2    1465000\n",
      "4    1600000\n",
      "6    1876000\n",
      "7    1636000\n",
      "Name: Price, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(\"Predicting for the following 5 houses:\")\n",
    "print(X.head())\n",
    "\n",
    "print(\"The predictions are: \")\n",
    "print(melbourne_model.predict(X.head()))\n",
    "\n",
    "print(\"True value are:\")\n",
    "print(y.head())\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 2990941,
     "sourceId": 5147887,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30732,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 5.799798,
   "end_time": "2024-07-11T15:35:08.251063",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-07-11T15:35:02.451265",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
